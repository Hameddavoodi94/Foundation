import numpy as np

# generate a random variable with 100 samples
x = np.random.normal(loc=10, scale=2, size=100)

# calculate the expected value (It's simply the average, because of the definition)
ev = np.mean(x)

# calculate the variance
var = np.var(x)

# generate another random variable with 100 samples
y = np.random.normal(loc=5, scale=1, size=100)

# calculate the covariance
cov = np.cov(x, y)[0, 1]

print("Random variable x:", x)
print("Expected value of x:", ev)
print("Variance of x:", var)
print("Random variable y:", y)
print("Covariance between x and y:", cov)

# Output
Random variable x: [11.42174502 12.65628446  4.8981634  12.12168783  8.62432146 10.37865662
 11.14718549 11.8082272   5.39639773 12.11074586 10.05759126 10.97634715
  8.55631045  8.14628537 13.60127959  9.76717768  9.73593046  9.70693998
  7.19816698  8.58595316 10.5219452  12.92459159 13.74698235 14.03111517
  9.80606311  8.58894008 12.5742339   9.58703288 13.49743059  8.64497883
 10.27064303  9.97969829  7.58578501  6.23202771 10.30774678 12.93084704
 11.30108773 10.42115611  5.54439088 11.15911014 12.13581309  5.03721943
  7.34467513  7.13748568  6.74685821 10.09434636 12.49499766 12.51998053
 10.13103292 13.79436421  8.82605942  7.85078052  5.9807094  13.21562706
 12.76046963  7.44926771  8.92250954  8.5254173  10.0977337  11.35691792
  6.04766128  9.23563489  9.96701478 10.49423775 10.73075021 10.25449475
 11.74991123 13.01956775  8.0658689  12.08826877 11.54130573  9.5602518
  7.20464449  9.52506063 10.34258242  9.47940432  4.91909435  6.77000716
  7.52203216 13.2724105   8.38103376  7.22159037 14.64746694 10.60804016
 10.47584337 10.64163546  6.51664087 11.00607685  9.42139078  9.57124266
 10.91507492  8.08656544 10.23841189 12.17629676  8.70361784  8.4278931
  7.08529901 11.38131406  9.96996765 10.0840342 ]
  
Expected value of x: 9.86323108957072
  
Variance of x: 5.190875018206888
  
Random variable y: [4.49950013 6.40729434 4.99725183 4.83230832 6.15996826 5.32948755
 4.38343356 5.77238598 3.41160982 3.53574801 5.49504002 4.63694545
 3.06682967 3.81320867 6.33374825 6.36533875 5.22843828 5.74529162
 5.30432771 6.21501831 6.70428467 5.52327451 5.16128384 4.13332841
 5.00501406 4.57917844 4.16327248 3.5583983  7.27092895 5.03865751
 4.19454046 4.38869151 4.94538186 4.84283521 4.89777963 5.14999295
 6.59688362 6.06311178 3.980843   4.31206207 6.39027139 4.31686682
 3.11570365 2.71154891 4.09275963 6.20219787 5.72060776 4.65021454
 2.4891207  5.72600245 4.69799938 5.91350631 4.67996516 5.22602445
 4.17976494 4.49943007 4.2953618  5.55528553 5.74576547 4.44552296
 5.61133979 4.31985283 4.14346936 5.69756805 4.5358079  5.19104456
 4.47886366 5.39944253 3.60697985 6.4069912  5.83901449 2.99933758
 4.53964715 5.49412348 5.4668872  5.36896469 4.7607948  4.43852621
 4.52517911 6.28273774 5.83627786 5.91596394 3.66669304 6.03526219
 4.63576606 3.99528823 4.20572162 5.76285901 5.57519104 5.19583797
 6.66553105 6.09929408 6.32150457 5.24073462 4.6257094  3.86872482
 4.58272874 5.26884856 4.9927999  5.66537684]
  
Covariance between x and y: 0.6240269834862016


'''
In the code above, we first generate a random variable x using the numpy.random.normal() function with mean 10, standard deviation 2, and size 100. 
We then calculate its expected value using the numpy.mean() function and its variance using the numpy.var() function.
We then generate another random variable y using the numpy.random.normal() function with mean 5, standard deviation 1, and size 100. 
Finally, we calculate the covariance between x and y using the numpy.cov() function and extract the appropriate element from the resulting matrix using [0, 1].

- Note that the covariance between two random variables is a measure of their linear relationship. 
  -If the covariance is positive, it indicates that the two variables tend to increase or decrease together. 
  -If the covariance is negative, it indicates that they tend to move in opposite directions. If the covariance is zero, it indicates that the two variables are uncorrelated.
'''
